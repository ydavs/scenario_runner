# tag::library-physical-time[]
type time is SI(s: 1)
unit s           of time is SI(s: 1, factor: 1)
unit hour        of time is SI(s: 1, factor: 3600)
unit h           of time is SI(s: 1, factor: 3600)
unit minute      of time is SI(s: 1, factor: 60)
unit min         of time is SI(s: 1, factor: 60)
# end::library-physical-time[]

# tag::library-physical-length[]
type length is SI(m: 1)
unit m          of length is SI(m: 1, factor: 1)
unit meter      of length is SI(m: 1, factor: 1)
unit km         of length is SI(m: 1, factor: 1000)
# end::library-physical-length[]

# tag::library-physical-velocity[]
type velocity is SI(m: 1, s: -1)
unit meter_per_second    of velocity is SI(m: 1, s: -1, factor: 1)
unit mps                 of velocity is SI(m: 1, s: -1, factor: 1)
unit kilometer_per_hour  of velocity is SI(m: 1, s: -1, factor: 0.277777778)
unit kmph                of velocity is SI(m: 1, s: -1, factor: 0.277777778)
unit kph                 of velocity is SI(m: 1, s: -1, factor: 0.277777778)
unit mile_per_hour       of velocity is SI(m: 1, s: -1, factor: 0.447038889)
unit mph                 of velocity is SI(m: 1, s: -1, factor: 0.447038889)
unit miph                of velocity is SI(m: 1, s: -1, factor: 0.447038889)
unit mmph                of velocity is SI(m: 1, s: -1, factor: 0.000000278)
unit millimeter_per_hour of velocity is SI(m: 1, s: -1, factor: 0.000000278)
# end::library-physical-velocity[]

actor dut
actor Path
modifier Path.set_map
modifier Path.path_min_driving_lanes
actor Model3
actor Rubicon
actor Carlacola
actor Firetruck
actor A2
actor Ninja
actor Crossbike
actor Woman1
actor Man1
actor Barrel

#import basic.osc

scenario top:
    path: Path                      # A path in the map
    path.set_map("Highway_Map_Light")    # specify map to use in this test
    path.path_min_driving_lanes(3)         # Path should have at least two lanes

    ego_vehicle: Model3                # ego car
    npc1: Rubicon  
    npc2: Model3             # The other car

    event start
    event end
    event left
    event right
    do serial(duration:30s):
        spawn: parallel(duration:7s):
            npc2.drive() with:
                speed(1kph)
                lane(2, at: start)
            ego_vehicle.drive() with:
                speed(30kph)
                lane(same_as:npc2, at: start)
                position(110m, behind: npc2, at: start)
            npc1.drive() with:
                speed(30kph)
                lane(same_as:npc2, at: start)
                position(80m, behind: npc2, at: start)  
                
        cut_out: parallel(duration:6s):
            npc1.drive() with:
                lane(left_of: npc2, at: end)
            ego_vehicle.drive()
            npc2.drive()
        brake: parallel(duration:10s):
            ego_vehicle.drive() with:
                speed(1kph)
            npc1.drive()
            npc2.drive()