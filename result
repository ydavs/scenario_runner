# tag::library-physical-time[]
type time is SI(s: 1)
unit s           of time is SI(s: 1, factor: 1)
unit hour        of time is SI(s: 1, factor: 3600)
unit h           of time is SI(s: 1, factor: 3600)
unit minute      of time is SI(s: 1, factor: 60)
unit min         of time is SI(s: 1, factor: 60)
# end::library-physical-time[]

# tag::library-physical-length[]
type length is SI(m: 1)
unit m          of length is SI(m: 1, factor: 1)
unit meter      of length is SI(m: 1, factor: 1)
unit km         of length is SI(m: 1, factor: 1000)
# end::library-physical-length[]

# tag::library-physical-velocity[]
type velocity is SI(m: 1, s: -1)
unit meter_per_second    of velocity is SI(m: 1, s: -1, factor: 1)
unit mps                 of velocity is SI(m: 1, s: -1, factor: 1)
unit kilometer_per_hour  of velocity is SI(m: 1, s: -1, factor: 0.277777778)
unit kmph                of velocity is SI(m: 1, s: -1, factor: 0.277777778)
unit kph                 of velocity is SI(m: 1, s: -1, factor: 0.277777778)
unit mile_per_hour       of velocity is SI(m: 1, s: -1, factor: 0.447038889)
unit mph                 of velocity is SI(m: 1, s: -1, factor: 0.447038889)
unit miph                of velocity is SI(m: 1, s: -1, factor: 0.447038889)
unit mmph                of velocity is SI(m: 1, s: -1, factor: 0.000000278)
unit millimeter_per_hour of velocity is SI(m: 1, s: -1, factor: 0.000000278)
# end::library-physical-velocity[]

actor dut
actor Path
modifier Path.set_map
modifier Path.path_min_driving_lanes
actor Model3
actor Rubicon
actor Woman1
actor Man1
actor Barrel
actor Creta
actor Mercedes
actor OlaScooter
actor OlaScooterCylinder
actor Bus
actor IndianTaxi

#import basic.osc

# tag::library-physical-angle[]
type angle is SI(rad: 1)
unit degree of angle is SI(rad: 1, factor: 57.295779513)
unit deg    of angle is SI(rad: 1, factor: 57.295779513)
unit radian of angle is SI(rad: 1, factor: 1)
unit rad    of angle is SI(rad: 1, factor: 1)
# end::library-physical-angle[]

scenario top:
    path: Path                      # A path in the map
    path.set_map("junction_2")    # specify map to use in this test
    path.path_min_driving_lanes(3)
    path.path_with_junction(junction_id:1,distance:None)         # Path should have at least two lanes

    npc: Rubicon
    #npc2: OlaScooter
    #npc3: OlaScooter
    #npc4: OlaScooterCylinder                # ego car
    ego_vehicle: Mercedes               # The other car

    event start
    event end
    event left
    event right
    do serial:
        spawn: parallel(duration:20s):
            ego_vehicle.drive(path) with:
                speed(0.1kph)
                #road_action(speed:20kph,turn:straight)
                lane(4, at: start)
            npc.drive(path) with:
                lane(right_of:ego_vehicle, at: start) # left to right: [1..n]
                position(45m, ahead_of: ego_vehicle, at: start)
                cross_action(speed: 10kph, angle: -30rad)
                #road_action(speed:40kph,wrong_side:true)
                orientation(yaw:-120rad, pitch:360.0rad, roll:0.0rad, relative_to:ego_vehicle, at: start)
                