import basic.osc
#video number:482
# tag::library-physical-angle[]
type angle is SI(rad: 1)
unit degree of angle is SI(rad: 1, factor: 57.295779513)
unit deg    of angle is SI(rad: 1, factor: 57.295779513)
unit radian of angle is SI(rad: 1, factor: 1)
unit rad    of angle is SI(rad: 1, factor: 1)
# end::library-physical-angle[]

scenario top:
    path: Path                      # A path in the map
    path.set_map("Highway_Map_Light")    # specify map to use in this test
    path.path_min_driving_lanes(2)
    #path.path_with_junction(junction_id:1,distance:None)         # Path should have at least two lanes

    ego_vehicle: AudiEtron               
    nearbyCar: AudiEtron
    bus: Bus
    oppositeCar: Model3
    
    event start
    event end

    do serial:

        spawn: parallel(duration:4s):
            ego_vehicle.drive(path) with:
                speed(30kph)
                lane(3, at: start)
            nearbyCar.drive(path) with:
                speed(37kph)
                lane (same_as: ego_vehicle, at:start)
                position(16m, ahead_of:ego_vehicle, at:start)
                #orientation(yaw:-20rad, pitch:360.0rad, roll:0.0rad, relative_to:ego_vehicle, at: start)
            bus.drive(path) with:
                speed(60kph)
                lane(same_as: ego_vehicle, at:start)
                position(50m, ahead_of:ego_vehicle, at:start)
            oppositeCar.drive(path) with:
                road_action(speed:55kph, wrong_side:true)
                lane(left_of: ego_vehicle, at:start)
                position(98m, ahead_of:ego_vehicle, at:start)
                orientation(yaw:180rad, pitch:360.0rad, roll:0.0rad, relative_to:ego_vehicle, at: start)

        lane_change: parallel(duration:4s):
            bus.drive(path)
            ego_vehicle.drive(path)
            oppositeCar.drive(path) with:
                road_action(speed:25kph, wrong_side:true)
            nearbyCar.drive(path) with:
                speed(30kph)
                lane(left_of: ego_vehicle, at: end)