import basic.osc
#video number: 833
# tag::library-physical-angle[]
type angle is SI(rad: 1)
unit degree of angle is SI(rad: 1, factor: 57.295779513)
unit deg    of angle is SI(rad: 1, factor: 57.295779513)
unit radian of angle is SI(rad: 1, factor: 1)
unit rad    of angle is SI(rad: 1, factor: 1)
# end::library-physical-angle[]

scenario top:
    path: Path                      # A path in the map
    path.set_map("Highway_Map_Light")    # specify map to use in this test
    path.path_min_driving_lanes(3)
    #path.path_with_junction(junction_id:1,distance:None)         # Path should have at least two lanes

    npc: Bus  # we need bus for this scenario
    npc2: Bus
    npc3: Model3
    npc4: OlaScooter
    npc5: Model3
    npc6: Mercedes               # ego car
    ego_vehicle: Model3               # The other car

    event start
    event end
    event left
    event right
    do serial:
        spawn: parallel(duration:5s):
            ego_vehicle.drive(path) with:
                speed(40kph)
                lane(1, at: start)
            npc.drive(path) with:
                speed(30kph)
                lane(right_of:ego_vehicle, at: start)
                position(0.5m, ahead_of:ego_vehicle, at: start)
            npc2.drive(path) with:
                speed(30kph)
                lane(right_of:ego_vehicle, at: start)
                position(40m, ahead_of:ego_vehicle, at: start)
            npc4.drive(path) with:
                speed(20kph)
                lane(right_of:npc2, at: start)
                position(13m, ahead_of:npc2, at: start)
            npc3.drive(path) with:
                speed(0kph)
                lane(right_of:npc4, at: start)
                position(0.5m, behind:npc4, at: start)
            npc5.drive(path) with:
                speed(40kph)
                lane(same_as:ego_vehicle, at: start)
                position(50m, ahead_of:ego_vehicle, at: start)
            npc6.drive(path) with:
                speed(40kph)
                lane(right_of:ego_vehicle, at: start)
                position(55m, ahead_of:ego_vehicle, at: start)
        switch: parallel(duration:10s):
            ego_vehicle.drive(path)
            npc.drive(path)
            npc2.drive(path) with:
                #speed(30kph)
                lane(right_of:npc, at:end)
            npc4.drive(path) with:
                speed(23kph)
            npc3.drive(path)
            npc5.drive(path)
            npc6.drive(path)

        
            
            
